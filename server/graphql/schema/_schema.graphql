# graphql schema
type Query {
  user(_id: String): User
  store(_id: String!): Store
  bill(userid: String): Bill
  task(_id: String!): Task
  #order(_id:String):Order

  checkIn(_id: String): CheckIn
  reason(_id: String): Reason
  message(_id: String): Message

  admin_rule(_id: String): Message
  admin_role(_id: String): Role
  admin_RoleAcl(_id: String): [RoleAccess]
}

type Mutation {
  updateUserInfo(
    qq: String
    idCard: String!
    bankCard: String!
    inviterCode: String
  ): User
  updateUserPassword(password: String, newPassword: String): User
  admin_updateUserStatus(_id: String!, status: UserStatus): User
  admin_userList(skip: Int, limit: Int): UserList

  # create a store and bind to the creator
  bindStore(
    name: String!
    website: String
    wangwang: String
    storeScreenShotImage: String
    address: String
    contactPhone: String
    type: String
  ): Store

  updateStoreInfo(
    _id: String!
    website: String
    wangwang: String
    storeScreenShotImage: String
    address: String
    contactPhone: String
  ): Store
  admin_updateStoreStatus(_id: String!, status: StoreStatus!): Store
  admin_storeList(skip: Int, limit: Int): StoreList

  newBill(
    amount: Float!
    type: BillType
    fromBank: String
    fromCard: String
    fromUser: String
  ): Bill
  admin_newBill(toUserid: String!, amount: Float!, type: BillType): Bill
  admin_checkBill(_id: String!): Bill
  billList(
    skip: Int!
    limit: Int! #status: BillStatus # todo
  ): BillList
  admin_billList(
    skip: Int!
    limit: Int! #status: BillStatus # todo
  ): BillList

  #task
  newTask(
    # _id:String

    goodsName: String
    goodsLink: String
    goodsImage: String
    goodsPrice: Float
    goodsTotal: Int
    goodsPriceShowed: Float
    goodsSpecification: String
    isFreeShipping: Boolean

    howToFindGoods: String

    orders: [orderInput]

    startTime: Float
    endTime: Float

    extraCommission: Float
    extraImages: [String]
    remark: String
    storeid: String
  ): Task

  taskList(skip: Int!, limit: Int!, status: TaskStatus): TaskList
  admin_taskList(
    userid: String
    skip: Int!
    limit: Int!
    #statusList: [TaskStatus]
    status: TaskStatus
  ): TaskList
  updateTaskInfo(
    _id: String!

    goodsName: String
    goodsLink: String
    goodsImage: String
    goodsPrice: Float
    goodsTotal: Int
    goodsPriceShowed: Float
    goodsSpecification: String
    isFreeShipping: Boolean

    howToFindGoods: String

    orders: [orderInput]

    startTime: Float
    endTime: Float

    extraCommission: Float
    extraImages: [String]
    remark: String
    storeid: String
  ): Task
  admin_updateTaskStatus(_id: String!, status: TaskStatus): Task

  # order
  orderList(
    skip: Int!
    limit: Int!
    #statusList: [TaskStatus]
    status: TaskStatus
    workerid: String
  ): TaskList # find all children tasks, Buyer can use tit
  admin_orderList(
    skip: Int!
    limit: Int!
    #statusList: [TaskStatus]
    status: TaskStatus
    workerid: String
  ): TaskList
  updateOrderStatus(_id: String!, status: OrderStatus!): Order

  # checkin
  newCheckIn(time: Float): CheckIn
  checkInList(skip: Int, limit: Int, userid: String): CheckInList

  # reason 拒绝理由
  admin_newReason(content: String): Reason
  admin_removeReason(_id: String): String
  admin_reasonList(skip: Int, limit: Int): ReasonList

  # message
  newMessage(content: String, taskid: String): Message
  admin_newMessage(content: String, taskid: String): Message
  updateMessage(_id: String, content: String): Message
  admin_updateMessage(_id: String, content: String): Message
  messageList(skip: Int, limit: Int, taskid: String): MessageList
  admin_messageList(skip: Int, limit: Int, taskid: String): MessageList
  # admin management
  admin_newRole(_id: String): Role
  admin_newUser(username: String, password: String, roleid: String): User
  admin_setAdmin(username: String, roleidList: [String]): User
  admin_disableUser(_id: String): User
}

# graphql schema
type Query{
    user(_id: String!): User
    store(_id: String!): Store
    bill(userid: String): Bill
    billRecord(_id: String!): BillRecord
}


type Mutation{
    updateUserInfo(
        qq: String
        idCard: String!
        bankCard: String!
    ): User
    updateUserStatus(
        _id: String!
        status: Int!
    ):  User
    userList(skip: Int, limit:Int): UserList

    # create a store and bind to the creator
    bindStore(
        name: String!
        website: String
        wangwang: String
        storeScreenShotImage: String
        address: String
        contactPhone: String
    ): Store

    updateStoreInfo(
        _id: String!
        name: String!
        website: String
        wangwang: String
        storeScreenShotImage:String
        address: String
        contactPhone: String
    ):Store
    updateStoreStatus(
        _id: String!
        status: Int!
    ):Store
    storeList(skip: Int, limit:Int): StoreList

    billRecord(
        toUserid: String!
        amount: Float!
        # 0 default, normal charge 正常充值, 1 Promotion 推广金,
        # 2 任务佣金锁定, 3 任务佣金退还, 4 任务佣金发放
        # 5 提现
        type: Int!

    ): BillRecord
    billRecordCheck(
        _id: String!
    ): BillRecord
    createTask(
        # _id:String
        orderNumber: String

        goodsName: String
        goodsLink: String
        goodsImage: String
        goodsPrice: Float
        goodsTotal: Int
        goodsPriceShowed: Float
        goodsSpecification: String
        isFreeShipping: Boolean

        howToFindGoods: String

        startTime: Float
        endTime: Float
        total: Int

        commission: Float
        platformServiceFee: Float
        platformCommission: Float

        extraCommission: Float
        extraImages:[String]
        remark:String

        storeid: String
    ): Task
    
    # startTask(
    #     _id:String!
    # ) :Task
    updateTaskStatus(
        _id:String!
        status: Int!
    ):Task

    undoTask(_id:String!): Task

}



# 签到
type CheckIn{
    _id: String
    userid: String
    create: Int
    update: Int
}


# 提现
type Withdraw{
    _id: String
    userid: String
    amount: Int
    # 0 default, 1 ok, 2 reject
    status:Int
    reason: String
    mark: String
    createdAt: Float
    updatedAt: Float
}

type RejectReason{
    _id:String
    content: String
}

# appeal
type appeal{
    _id: String
    userid:String
    taskid:String
    createdAt: Float
    updatedAt: Float
    # 撤销订单 todo: 什么是撤销订单?
    cancelOrder: String
    # 0 default open, 1 closed
    status: Int

}
type appealMessage{
    _id: String
    appealid: String
    
    userid:String
    content:String
    createdAt: Float
    updatedAt: Float
}
# 佣金计算规则
type commissionRule {
    _id: String

    buyerPercentage: Float
    platformPercentage: Float

    storePromotion: Float
    buyerPromotion: Float

    createdAt: Float
    updatedAt: Float

    keyword:Int
    image: Int
    userArea: Int
    userAge: Int
    userGender:Int
    userLevel: Int
    userAntCreditPay: Int
    userCollection:Int
    
}

#


# 用户余额
type Bill{
    _id: String
    userid: String
    # unit is cent
    total: Float
    remained: Float
    freeze: Float
    withdraw: Float


    createdAt: Float
    updatedAt: Float
}
# 充值记录,变更记录
type BillRecord {
    _id: String
    userid: String
    toUserid: String
    amount: Float
    # 0 default, normal charge 正常充值, 1 Promotion 推广金,
    # 2 任务佣金锁定, 3 任务佣金退还, 4 任务佣金发放
    # 5 提现
    type: Float
    # 0 default and waiting for check, 1 checked

    status: Int

    createdAt: Float
    updatedAt: Float
}

enum BillRecordType {
  DEFAULT 
  PROMOTION 
  TASK_LOCK 
  TASK_REFUND 
  TASK_PAYMENT 
  WITHDRAW 
}

enum BillRecordStatus{
  DEFAULT 
  CHECKED

}
# 店铺信息
type Store{
    _id: String!
    name: String!
    userid: String

    # 类型 淘宝,京东,拼多多
    type: String
    website: String
    # 旺旺名称
    wangwang: String
    storeScreenShotImage:String

    # provice_city_area_detail
    address: String
    contactPhone: String
    # 0 default, 1 ok, 2 checked need update
    status: Int

    createdAt: Float
    updatedAt: Float
}

enum StoreStatus{
  DEFAULT
  OK 
  BAD
}

type StoreList{
    list: [Store],
    total: Int
}
# 任务
type Task{
    _id: String!
    parent: String
    orderNumber: String

    goodsName: String
    goodsLink: String
    goodsImage: String
    goodsPrice: Float
    goodsTotal: Int
    goodsPriceShowed: Float
    goodsSpecification: String
    isFreeShipping: Boolean

    howToFindGoods: String


    startTime: Float
    endTime: Float
    total: Int

    commission: Float
    platformServiceFee: Float
    platformCommission: Float

    extraCommission: Float
    extraImages:[String]
    remark:String

    status:TaskStatus

    storeid: String
    userid: String
    workerid: String

    createdAt: Float
    updatedAt: Float

}


# 0 default, 
# 1 being assigned to worker, 
# 2 in appeal 
# 3 finished
# 4 abort 放弃
enum TaskStatus{
    DEFAULT 
    ASSIGNED
    APPEAL
    FINISHED
    ABORT
}
#用户
type User{
    _id: String!
    # remained, an increasing number 
    #id: Int
    username: String!
    mobileNumber: String

    qq: String

    idCard: String
    bankCard: String
    # 0 default, 1 ok, 2 need update, 3 freeze
    status: UserStatus
    createdAt: Float
    updatedAt: Float

    bill: Bill

}
type UserList{
    list: [User],
    total: Int
}

enum UserStatus{
  DEFAULT 
  OK 
  BAD 
  FREEZE
}
